name: on-push
# Testing cache
on: ['push']

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  build:
    name: 🔁 ci
    runs-on: ubuntu-latest
    strategy:
      matrix:
        step: [type-check, lint, format, test, build]
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}

    steps:
      - name: 🔸 Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: ⬇️ Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🧪 ${{ matrix.step }}
        run: pnpm run turbo:${{ matrix.step }}

      - name: Cache turbo build setup
        uses: actions/cache@v3
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

  deploy:
    name: 🚀 deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
          run_install: false


      - name: install Vercel CLI with pnpm
        run: pnpm install -g vercel@latest

      - name: pull Vercel environment information
        run:  vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: build project artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: deploy to Vercel
        run: vercel --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}

  # e2e:
  #   name: 🧪 tests
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       shardIndex: [1, 2, 3, 4, 5]
  #       shardTotal: [5]
  #   steps:
  #     - name: 🔸 Setup node
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: 20

  #     - name: ⬇️ Checkout repo
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0

  #     - name: 📦 Install pnpm
  #       uses: pnpm/action-setup@v2
  #       with:
  #         version: latest
  #         run_install: false

  #     - name: Get pnpm store directory
  #       shell: bash
  #       run: |
  #         echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

  #     - uses: actions/cache@v3
  #       name: Setup pnpm cache
  #       with:
  #         path: ${{ env.STORE_PATH }}
  #         key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
  #         restore-keys: |
  #           ${{ runner.os }}-pnpm-store-

  #     - name: 📦 Install dependencies
  #       run: pnpm install --frozen-lockfile

  #     - name: Install Playwright's dependencies
  #       run: pnpm exec playwright install

  #     - name: 🧪 Run tests
  #       run: pnpm exec playwright test --shard=${{ matrix.shardIndex }}/${{ matrix.shardTotal }}

  #     - name: 📊 Upload test results
  #       uses: test-summary/action@v2.2
  #       with:
  #         paths: '**/test-results/*.xml'
  #       if: always()
